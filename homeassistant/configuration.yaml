homeassistant:
  name: Domov
  # Location required to calculate the time the sun rises and sets
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  elevation: !secret home_elevation
  unit_system: metric
  time_zone: Europe/Prague
  currency: CZK
  country: CZ
  # Customization file
  customize: !include customize.yaml
  customize_glob: !include customize_glob.yaml

frontend:
  themes: !include_dir_merge_named themes
  extra_module_url:
    - /hacsfiles/lovelace-card-mod/card-mod.js
config:
system_health:
http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 192.168.10.3

logger:
  default: info
  #logs:
    # log level for MQTT integration
    #homeassistant.components.mqtt: debug

# Discover some devices automatically
#discovery:

# View all events in a logbook
logbook:

# Track the sun
sun:

smartir:
climate:
  - platform: smartir
    name: AC_bedroom
    unique_id: ac_bedroom
    device_code: 1402
    controller_data: remote.broadlink_bedroom_remote
  - platform: smartir
    name: AC_kids
    unique_id: ac_kids
    device_code: 1402
    controller_data: remote.broadlink_kids_remote
  - platform: smartir
    name: AC_living
    unique_id: ac_living
    device_code: 1402
    controller_data: remote.broadlink_living_remote

#notify:
#  - name: pushover
#    platform: pushover
#    api_key: !secret pushover_apikey
#    user_key: !secret pushover_userkey


automation: !include automations.yaml

input_boolean: !include input/boolean.yaml
#input_select: !include input/select.yaml
input_number: !include input/number.yaml
input_datetime: !include input/datetime.yaml

alert: !include_dir_named alerts

sensor: !include_dir_list sensors
binary_sensor: !include_dir_list binary_sensors

# Enables support for tracking state changes over time
history:
# Tracked history is kept for 10 days
recorder:
#  purge_interval: 1
# Store data to InfluxDB
#influxdb:
#  username: !secret influx_user
#  password: !secret influx_password
#  tags_attributes:
#    - friendly_name
#  exclude:
#    domains:
#      - automation
influxdb:
  api_version: 2
  host: localhost
  port: 8086
  ssl: false
  token: !secret influx_token
  organization: 4504f957723cc68c
  bucket: HASS
  tags_attributes:
    - friendly_name
  exclude:
    domains:
      - automation


panel_iframe:
  zigbee:
    title: "Zigbee2MQTT"
    url: "https://home.cernych.cz:8124"
    icon: mdi:zigbee

alarm_control_panel:
  - platform: manual
    name: home_alarm
    code: "2607"
    arming_time: 30
    delay_time: 5
    trigger_time: 120
    disarmed:
      trigger_time: 0
    armed_home:
      arming_time: 0
      delay_time: 0

weather:
  - platform: template
    name: "rounded"
    condition_template: "{{ states('weather.openweathermap') }}"
    temperature_template: "{{ state_attr('weather.openweathermap', 'temperature') | round(0, default=-99) }}"
    humidity_template: "{{ state_attr('weather.openweathermap', 'humidity') | round(0, default=-99) }}"
    forecast_hourly_template: >
      {% set ns = namespace(z = []) %}
      {% for x in state_attr('weather.openweathermap', 'forecast') %}
        {% set ns.z = ns.z +
          [{
          'condition': x.condition,
          'precipitation': x.precipitation,
          'temperature': x.temperature | round(0, default=-99),
          'datetime': x.datetime,
          'wind_bearing': x.wind_bearing,
          'wind_speed': x.wind_speed
          }] %}
       {% endfor %}
       {{ ns.z }}
  - platform: template
    name: "rounded_chmu"
    condition_template: "{{ states('weather.domov') }}"
    temperature_template: "{{ state_attr('weather.domov', 'temperature') | round(0, default=-99) }}"
    humidity_template: "{{ state_attr('weather.domov', 'humidity') | round(0, default=-99) }}"
    forecast_hourly_template: >
      {% set ns = namespace(z = [], count = 0) %}
      {% for x in state_attr('weather.domov', 'forecast') %}
        {% set ns.count = ns.count +1 %}
        {% if ns.count in (1,4,7,10) %}
          {% set ns.z = ns.z +
            [{
            'condition': x.condition,
            'precipitation': x.precipitation,
            'temperature': x.temperature | round(0, default=-99),
            'datetime':  x.datetime.strftime("%Y-%m-%dT%H:%M:%S") ,
            'wind_bearing': x.wind_bearing,
            'wind_speed': x.wind_speed
            }] %}
         {% endif %}
       {% endfor %}
       {{ ns.z }}
