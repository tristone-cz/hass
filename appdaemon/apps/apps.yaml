schedy_heating:
  module: hass_apps_loader
  class: SchedyApp
  debug: false

  # Helper function to handle time intervals crossing midnight
  expression_environment: |
    def time_between(start, end):
        current = time.hour * 60 + time.minute + 1
        if start >= end:
            return current >= start or current < end
        return current >= start and current < end

  actor_type: thermostat

  # -----------------------------------------------
  # Common for all rooms
  # -----------------------------------------------
  schedule_prepend:
  # Valve maintenance
  # Replaced by HA automation and setting climate presets; kept for evidence
  #  - v: 28
  #    rules:
  #    - weekdays: 4
  #      rules:
  #      - { start: "10:21", end: "10:29" }
  # Master switch
  - x: "OFF if is_off('binary_sensor.heating_enabled') else Next()"
  # Open windows / doors
  - x: "Mark(OFF, Mark.OVERLAY) if not is_empty(filter_entities('binary_sensor', state='on', window_room=room_name)) else Next()"

  watched_entities:
  - binary_sensor.heating_enabled
  - binary_sensor.workday_status
  - sensor.today_minutes

  rooms:
    # -----------------------------------------------
    # Plan for bedroom
    # -----------------------------------------------
    bedroom:
      rescheduling_delay: 120
      actors:
        climate.trv_bedroom:
          hvac_mode_on: heat

      watched_entities:
      - binary_sensor.bedroom_window_delayed
      - input_number.bedroom_high_temperature
      - input_number.bedroom_low_temperature
      - input_boolean.bedroom_work_first_active
      - input_boolean.bedroom_work_second_active
      - input_boolean.bedroom_free_first_active
      - input_boolean.bedroom_free_second_active
      - sensor.bedroom_work_first_on
      - sensor.bedroom_work_first_off
      - sensor.bedroom_work_second_on
      - sensor.bedroom_work_second_off
      - sensor.bedroom_free_first_on
      - sensor.bedroom_free_first_off
      - sensor.bedroom_free_second_on
      - sensor.bedroom_free_second_off

      schedule:
      # Work day, first interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_work_first_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state('sensor.bedroom_work_first_on')), int(state('sensor.bedroom_work_first_off'))) else Next()

      # Work day, second interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_work_second_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state('sensor.bedroom_work_second_on')), int(state('sensor.bedroom_work_second_off'))) else Next()

      # Free day, first interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_free_first_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state('sensor.bedroom_free_first_on')), int(state('sensor.bedroom_free_first_off'))) else Next()

      # Free day, second interval of high temperature
      - x: state("input_number.bedroom_high_temperature") if (state("input_boolean.bedroom_free_second_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state('sensor.bedroom_free_second_on')), int(state('sensor.bedroom_free_second_off'))) else Next()

      # At all other times, set temperature to low value
      - x: state("input_number.bedroom_low_temperature")


    # -----------------------------------------------
    # Plan for living room
    # -----------------------------------------------
    living:
      rescheduling_delay: 120
      actors:
        climate.trv_living:
          hvac_mode_on: heat

      watched_entities:
      - binary_sensor.living_window_delayed
      - binary_sensor.living_door_delayed
      - input_number.living_high_temperature
      - input_number.living_low_temperature
      - input_boolean.living_work_first_active
      - input_boolean.living_work_second_active
      - input_boolean.living_free_first_active
      - input_boolean.living_free_second_active
      - sensor.living_work_first_on
      - sensor.living_work_first_off
      - sensor.living_work_second_on
      - sensor.living_work_second_off
      - sensor.living_free_first_on
      - sensor.living_free_first_off
      - sensor.living_free_second_on
      - sensor.living_free_second_off

      schedule:
      # Work day, first interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_work_first_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state('sensor.living_work_first_on')), int(state('sensor.living_work_first_off'))) else Next()

      # Work day, second interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_work_second_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state('sensor.living_work_second_on')), int(state('sensor.living_work_second_off'))) else Next()

      # Free day, first interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_free_first_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state('sensor.living_free_first_on')), int(state('sensor.living_free_first_off'))) else Next()

      # Free day, second interval of high temperature
      - x: state("input_number.living_high_temperature") if (state("input_boolean.living_free_second_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state('sensor.living_free_second_on')), int(state('sensor.living_free_second_off'))) else Next()

      # At all other times, set temperature to low value
      - x: state("input_number.living_low_temperature")

    # -----------------------------------------------
    # Plan for kids room
    # -----------------------------------------------
    kids:
      rescheduling_delay: 120
      actors:
        climate.trv_kids:
          hvac_mode_on: heat

      watched_entities:
      - binary_sensor.kids_window_delayed
      - binary_sensor.kids_door_delayed
      - input_number.kids_high_temperature
      - input_number.kids_low_temperature
      - input_boolean.kids_work_first_active
      - input_boolean.kids_work_second_active
      - input_boolean.kids_free_first_active
      - input_boolean.kids_free_second_active
      - sensor.kids_work_first_on
      - sensor.kids_work_first_off
      - sensor.kids_work_second_on
      - sensor.kids_work_second_off
      - sensor.kids_free_first_on
      - sensor.kids_free_first_off
      - sensor.kids_free_second_on
      - sensor.kids_free_second_off

      schedule:
      # Work day, first interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_work_first_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state('sensor.kids_work_first_on')), int(state('sensor.kids_work_first_off'))) else Next()

      # Work day, second interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_work_second_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state('sensor.kids_work_second_on')), int(state('sensor.kids_work_second_off'))) else Next()

      # Free day, first interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_free_first_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state('sensor.kids_free_first_on')), int(state('sensor.kids_free_first_off'))) else Next()

      # Free day, second interval of high temperature
      - x: state("input_number.kids_high_temperature") if (state("input_boolean.kids_free_second_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state('sensor.kids_free_second_on')), int(state('sensor.kids_free_second_off'))) else Next()

      # At all other times, set temperature to low value
      - x: state("input_number.kids_low_temperature")

schedy_cooling:
  module: hass_apps_loader
  class: SchedyApp
  debug: false

  # Helper function to handle time intervals crossing midnight
  expression_environment: |
    def time_between(start, end):
        current = time.hour * 60 + time.minute + 1
        if start >= end:
            return current >= start or current < end
        return current >= start and current < end

  actor_type: thermostat

  # -----------------------------------------------
  # Common for all rooms
  # -----------------------------------------------
  schedule_prepend:
  # Master switch
  - x: "OFF if is_off('binary_sensor.cooling_enabled') else Next()"

  watched_entities:
  - binary_sensor.cooling_enabled
  - binary_sensor.workday_status
  - sensor.today_minutes

  rooms:
    # -----------------------------------------------
    # Plan for bedroom
    # -----------------------------------------------
    bedroom:
      actors:
        climate.bedroom_ac:
          hvac_mode_on: cool

      watched_entities:
      - input_number.bedroom_ac_trigger_temperature
      - input_number.bedroom_ac_cool_temperature
      - input_boolean.bedroom_work_ac_active
      - input_boolean.bedroom_free_ac_active
      - sensor.bedroom_ac_on
      - sensor.bedroom_ac_off
      - sensor.bedroom_free_ac_on
      - sensor.bedroom_free_ac_off
      - sensor.bedroom_max_temperature

      schedule:
      # Work day
      - x: state("input_number.bedroom_ac_cool_temperature") if (state("input_boolean.bedroom_work_ac_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state("sensor.bedroom_ac_on")), int(state("sensor.bedroom_ac_off"))) and (float(state("sensor.bedroom_max_temperature")) >= float(state("input_number.bedroom_ac_trigger_temperature"))) else Next()

      # Free day
      - x: state("input_number.bedroom_ac_cool_temperature") if (state("input_boolean.bedroom_free_ac_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state("sensor.bedroom_free_ac_on")), int(state("sensor.bedroom_free_ac_off"))) and (float(state("sensor.bedroom_max_temperature")) >= float(state("input_number.bedroom_ac_trigger_temperature"))) else Next()

      # At all other times, set temperature to low value
      - v: "OFF"

    # -----------------------------------------------
    # Plan for living room
    # -----------------------------------------------
    living:
      actors:
        climate.ac_living:
          hvac_mode_on: cool

      watched_entities:
      - input_number.living_ac_trigger_temperature
      - input_number.living_ac_cool_temperature
      - input_boolean.living_work_ac_active
      - input_boolean.living_free_ac_active
      - sensor.living_ac_on
      - sensor.living_ac_off
      - sensor.living_free_ac_on
      - sensor.living_free_ac_off
      - sensor.living_max_temperature

      schedule:
      # Work day
      - x: state("input_number.living_ac_cool_temperature") if (state("input_boolean.living_work_ac_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state("sensor.living_ac_on")), int(state("sensor.living_ac_off"))) and (float(state("sensor.living_max_temperature")) >= float(state("input_number.living_ac_trigger_temperature"))) else Next()

      # Free day
      - x: state("input_number.living_ac_cool_temperature") if (state("input_boolean.living_free_ac_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state("sensor.living_free_ac_on")), int(state("sensor.living_free_ac_off"))) and (float(state("sensor.living_max_temperature")) >= float(state("input_number.living_ac_trigger_temperature"))) else Next()

      # At all other times, set temperature to low value
      - v: "OFF"

    # -----------------------------------------------
    # Plan for kids room
    # -----------------------------------------------
    kids:
      actors:
        climate.ac_kids:
          hvac_mode_on: cool

      watched_entities:
      - input_number.kids_ac_trigger_temperature
      - input_number.kids_ac_cool_temperature
      - input_boolean.kids_work_ac_active
      - input_boolean.kids_free_ac_active
      - sensor.kids_ac_on
      - sensor.kids_ac_off
      - sensor.kids_free_ac_on
      - sensor.kids_free_ac_off
      - sensor.kids_max_temperature

      schedule:
      # Work day
      - x: state("input_number.kids_ac_cool_temperature") if (state("input_boolean.kids_work_ac_active") == "on") and (state("binary_sensor.workday_status") == "on") and time_between(int(state("sensor.kids_ac_on")), int(state("sensor.kids_ac_off"))) and (float(state("sensor.kids_max_temperature")) >= float(state("input_number.kids_ac_trigger_temperature"))) else Next()

      # Free day
      - x: state("input_number.kids_ac_cool_temperature") if (state("input_boolean.kids_free_ac_active") == "on") and (state("binary_sensor.workday_status") == "off") and time_between(int(state("sensor.kids_free_ac_on")), int(state("sensor.kids_free_ac_off"))) and (float(state("sensor.kids_max_temperature")) >= float(state("input_number.kids_ac_trigger_temperature"))) else Next()

      # At all other times, set temperature to low value
      - v: "OFF"
